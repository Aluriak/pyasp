% gringo-3.0.3 testall.txt ../src/query/inflgraph_with_no_change_observations/minimize_inconsistencies.gringo.old | /clasp-2.0.2-mt  --stats  ---restart-on-model --solu --opt-heu --save-pro  --opt-hier --heu=vmtf
input(P,V) :- exp(P), input(V).
exp(P) :- obs_vlabel(P,V,S).
exp("empty") :- 0{obs_vlabel(P,V,S)}0.

% auxiliary definitions
sign(-1;1).
complement(S,-S) :- sign(S).


% possible repairs
pos(dedge(U,V))   :- vertex(U;V), U != V, edge(U,V). 
%                      not vlabel(P,U,0),
%                      not obs_vlabel(P,V,1), not obs_vlabel(P,V,-1),
%                      multi_edged(V), %dont disconnect nodes
%                      exp(P), not input(P,V).

multi_edged(V) :- edge(U,V), edge(X,V), U!=X.

% choose repair
{ repair(R) } :- pos(R).
% remaining edges
r_edge(U,V) :- edge(U,V), not repair(dedge(U,V)).



% here comes the choice rules
1{vlabel(P,V,1), vlabel(P,V,-1), vlabel(P,V,0)}1 :- exp(P), vertex(V), not input(P,V).
%  1{vlabel(P,U,1), vlabel(P,U,-1), vlabel(P,U,0)}1 :- exp(P), edge(U,V), not input(P,V).

elabel(U,V,S) :-        r_edge(U,V), not elabel(U,V,T), complement(S,T).


% construct consistent total labeling
elabel(U,V,S) :-        r_edge(U,V), obs_elabel(U,V,S).


vlabel(P,V,S) :- exp(P), vertex(V), obs_vlabel(P,V,S).


%observed nodes
obs_vlabel(P,V) :-  obs_vlabel(P,V,S).

% forward propagation of signs
vlabel(P,V,1)  :- not input(P,V), infl(P,V,1), not infl(P,V,-1),     not obs_vlabel(P,V).
vlabel(P,V,-1) :- not input(P,V), infl(P,V,-1), not infl(P,V,1),     not obs_vlabel(P,V).
vlabel(P,V,0)  :- vertex(V), exp(P), not input(V), infl(P,V,0), not infl(P,V,-1), not infl(P,V,1), not obs_vlabel(P,V).

% influences
infl(P,V,1)  :- r_edge(U,V), elabel(U,V,1),  vlabel(P,U,1).
infl(P,V,1)  :- r_edge(U,V), elabel(U,V,-1), vlabel(P,U,-1).
infl(P,V,-1) :- r_edge(U,V), elabel(U,V,1),  vlabel(P,U,-1).
infl(P,V,-1) :- r_edge(U,V), elabel(U,V,-1), vlabel(P,U,1).

infl(P,V,0)  :- r_edge(U,V),                 vlabel(P,U,0).


% explained
%  variation must be explained
explained(V,P) :- vlabel(P,V,1),  infl(P,V,1).
explained(V,P) :- vlabel(P,V,-1), infl(P,V,-1).
% no variation must {not} be explained
explained(V,P) :- vlabel(P,V,0),  infl(P,V,-1), infl(P,V,1).
explained(V,P) :- vlabel(P,V,0),  r_edge(U,V),  vlabel(P,U,0),
                  not infl(P,V,-1), not infl(P,V,1).
                  
err(V,P)  :- vertex(V), exp(P), not explained(V,P), not input(P,V).
                                   


% no diconnected vertices allowed
% in_edge(X) :- edge(Y,X), not repair(dedge(Y,X)).
% :- vertex(X), not in_edge(X), not input(X).

:- elabel(U,V,1), elabel(U,V,-1).

% optimize statement
% #maximize[ not false= 0, repair(dedge(U,V)) ].
#minimize[ not false= 0, err(V,P) ]. 


% output projection
#hide.
#show err/2.
% err(V) :- err(V,P).
% #show err/1.

